plugins {
    id 'java-library'
    // id 'com.github.joschi.licenser' version '0.6.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

allprojects {
    apply plugin: 'java-library'
    // apply plugin: 'com.github.joschi.licenser'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'me.untouchedodin0.privatemines'
    version '3.0.7-SNAPSHOT'


   /* license {
        header = project.file('LICENCE')
    }*/

    repositories {
        mavenCentral()

        maven { url = 'https://jitpack.io' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url = "https://repo.codemc.org/repository/maven-public/" }
        maven { url = 'https://maven.sk89q.com/repo/' }
        maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:22.0.0' // none of these have runtime retention lol

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }


    test {
        useJUnitPlatform()
    }



    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compileOnly 'org.spigotmc:spigot-api:1.17-R0.1-SNAPSHOT'
        compileOnly 'me.clip:placeholderapi:2.10.9'
        implementation 'org.codemc.worldguardwrapper:worldguardwrapper:1.2.0-SNAPSHOT'
        implementation 'com.github.CryptoMorin:XSeries:v8.4.0'
        implementation 'com.github.Redempt:RedLib:6.0.9.1'
    }

    shadowJar {
        relocate 'org.codemc.worldguardwrapper', 'me.untouchedodin0.privatemines.worldguardwrapper'
    }
}


dependencies {
    subprojects.forEach(project -> implementation(project))
}


task copyTo1_8Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.8.8/plugins"
}

task copyTo1_12Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.12.2 Private Mines/plugins"
}

task copyTo1_17Server(type: Copy) {
    from shadowJar
    into "E:/Coding/Spigot Test Servers/1.17 - Paper (pmines rewrite)/plugins"
}


task updateJars {
    if (!new File("E:/Coding").exists()) {
        return
    }

    dependsOn copyTo1_8Server
    dependsOn copyTo1_12Server
    dependsOn copyTo1_17Server
}